// The Android Gradle Plugin builds the native code with the Android NDK.

group = "com.cactus.flutter"
version = "0.0.1"

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.0")
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"

task unzipJniLibsTask(type: Copy) {
    def jniLibsDir = file("src/main/jniLibs")
    def jniLibsZipFile = file("jniLibs.zip") // Assumes jniLibs.zip is in cactus-flutter/android/

    from zipTree(jniLibsZipFile)
    into jniLibsDir
    // If your .zip file has an unnecessary leading directory, you might need:
    // eachFile { fcd ->
    //    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    // }

    doFirst {
        if (!jniLibsZipFile.exists()) {
            throw new InvalidUserDataException("jniLibs.zip not found at ${jniLibsZipFile.absolutePath}. This file is required for the cactus-flutter plugin.")
        }
        println "unzipJniLibsTask: Deleting old jniLibs directory: ${jniLibsDir}"
        delete(jniLibsDir)
        println "unzipJniLibsTask: Creating jniLibs directory: ${jniLibsDir}"
        jniLibsDir.mkdirs()
        println "unzipJniLibsTask: Unzipping ${jniLibsZipFile.name} to ${jniLibsDir}"
    }

    doLast {
        println "unzipJniLibsTask: Finished unzipping ${jniLibsZipFile.name}."
        // Example check for one of the expected files
        def unzippedSoFile = file("${jniLibsDir}/arm64-v8a/libcactus.so")
        if (unzippedSoFile.exists()) {
            println "unzipJniLibsTask: Successfully unzipped ${unzippedSoFile.name} (size: ${unzippedSoFile.length()} bytes)"
        } else {
            println "unzipJniLibsTask: WARNING - ${unzippedSoFile.path} was not found after unzipping."
            println "unzipJniLibsTask: Please ensure jniLibs.zip contains the expected .so files (e.g., arm64-v8a/libcactus.so)."
            // List contents for debugging if the main file isn't found
            println "Contents of ${jniLibsDir}:"
            jniLibsDir.eachFileRecurse { f -> println "  - ${f.name}" }
        }
    }
}

android {
    namespace = "com.cactus.flutter"
    compileSdk = 35
    ndkVersion = rootProject.ext.has("ndkVersion") ? rootProject.ext.get("ndkVersion") : "26.1.10909125"

    sourceSets {
        main.jniLibs.srcDirs += ['src/main/jniLibs'] // Rely only on this for .so files
    }

    defaultConfig {
        minSdk = 21
        // No ndk.abiFilters here, let jniLibs content define ABIs for packaging
        // No externalNativeBuild.cmake block here for the module itself
    }
  
    // No externalNativeBuild block here for the module itself

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        // Ensure the unzip task runs before the preBuild task for each variant.
        // For AGP 7.0+ preBuild is a direct task provider.
        // For older versions, you might need variant.preBuild or variant.preBuildProvider.get()
        def preBuildTaskName = "pre${variant.name.capitalize()}Build"
        tasks.named(preBuildTaskName).configure {
            it.dependsOn(unzipJniLibsTask)
        }

        // Alternative, more general way to ensure it runs before JNI libs are merged.
        // This can be more robust across AGP versions if preBuild hook is tricky.
        // tasks.matching { it.name.startsWith("merge") && it.name.endsWith("JniLibFolders") }.all {
        //    it.dependsOn(unzipJniLibsTask)
        // }
    }
}
